love.graphics.setDefaultFilter('nearest', 'nearest')

local tiny = require('tiny-ecs')
local beholder = require('beholder/beholder')

local PIECE_W_E = 'PIECE_W_E'
local PIECE_E_S = 'PIECE_E_S'
local PIECE_S_W = 'PIECE_S_W'
local PIECE_W_N = 'PIECE_W_N'
local PIECE_N_E = 'PIECE_N_E'

local pieces = {
  PIECE_W_E,
  PIECE_E_S,
  PIECE_S_W,
  PIECE_W_N,
  PIECE_N_E,
}

local timerSystem = tiny.processingSystem()
timerSystem.filter = tiny.requireAll('timer')
function timerSystem:process(e, dt)
  e.timer.time = e.timer.time + dt

  while e.timer.time > e.timer.maxTime do
    e.timer.time = e.timer.time - e.timer.maxTime
    beholder.trigger('TIMER_MAXTIME_REACHED', e)
  end
end

local spawnerSystem = tiny.processingSystem()
spawnerSystem.filter = tiny.requireAll('spawner')
function spawnerSystem:process(e, dt)
  if e.spawner.spawnPiece then
    e.spawner.newPiece = pieces[love.math.random(table.getn(pieces))]
    e.spawner.spawnPiece = false
    beholder.trigger('LOGIC_NEW_PIECE', e.spawner.newPiece)
  end
end
spawnerSystem.timerObserverId = beholder.observe('TIMER_MAXTIME_REACHED', function (e)
  if e.timer.name == 'TIMER_SPAWN' then
    e.spawner.spawnPiece = true
  end
end)

local fallingPieceSystem = tiny.processingSystem()
fallingPieceSystem.filter = tiny.requireAll('fallingPiece')
function fallingPieceSystem:process(e, dt)

end
fallingPiece.spawnPieceObserverId = beholder.observe('LOGIC_NEW_PIECE', function (e) 
  if e.spawner.newPiece then
    pieceMatrix.fallingPiece = e.spawner.newPiece
  end
end)

local pieceSpawner = {
  timer = {
    name = 'TIMER_SPAWN',
    time = 0,
    maxTime = 1,
  },
  spawner = {
    spawnPiece = false,
    newPiece = nil,
  }
}

local pieceMatrix = {
  fallingPiece = {
    blocks = {},
    fallNow = false,
  },
  blocks = {},
}

local world = tiny.world(
    timerSystem,
    spawnerSystem)

tiny.addEntity(world, pieceSpawner)

function love.load()
  
end

function love.keypressed(key)

end

function love.keyreleased(key)

end

function love.update(dt)
  world:update(dt)
end

function love.draw()

end
